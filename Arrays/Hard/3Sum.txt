//15. 3Sum


class Solution {
public:

    //2pointer approach, fix i then apply 2sum using 2pointer

    vector<vector<int>> threeSum(vector<int>& nums) {

        vector<vector<int>> ans;
        int n = nums.size();

        sort(nums.begin(), nums.end());

        for(int i = 0; i<n-2; i++)
        {   
            if (i != 0 && nums[i] == nums[i - 1]) continue;     //skipping the duplicates in ith place   

            vector<int> tempList;
            int left = i+1, right = n-1;
            //2sum
            while(left<right)
            {
                int sum = nums[i]+nums[left]+nums[right];
                if(sum == 0)
                {
                    tempList.push_back(nums[i]);
                    tempList.push_back(nums[left]);
                    tempList.push_back(nums[right]);                    
                    ans.push_back(tempList);
                    tempList.clear();                    
                    left++;                    
                    while (left < right && nums[left] == nums[left - 1])    //skippin the duplicates in left's place
                        left++;                                
                }

                else if(sum<0)
                    left++;
                else
                    right--;            
            }
        }

        return ans;

    }
};
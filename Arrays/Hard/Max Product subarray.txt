//152. Max Product subarray

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        
        int maxPrefixProduct = INT_MIN, maxSuffixProduct = INT_MIN, prefixProduct = 1, suffixProduct = 1;
        int n = nums.size();

        //prefix prod--> prod from left to right
        //prod from right to left

        //why both side?? -->after neglecting one negative number which side product is more
       //in this problem,only 0 can seperate a subarray, otherwise subarray will be from left or right, not from middle

        for(int i = 0; i<n; i++)
        {           
            prefixProduct = prefixProduct * nums[i];
            //storing the max till now, if a negative comes then it moves to next and if again negative comes, it becomes positive and hance max
            maxPrefixProduct = max(maxPrefixProduct, prefixProduct);            
            suffixProduct = suffixProduct * nums[n-i-1];
            maxSuffixProduct = max(maxSuffixProduct, suffixProduct); 

             //if 0 then start new
            if(nums[i] == 0)            
                prefixProduct = 1;                                            
            if(nums[n-i-1] == 0)
                suffixProduct = 1;
        

        }
        //returning the max value
        return max(maxPrefixProduct, maxSuffixProduct);

    }
};
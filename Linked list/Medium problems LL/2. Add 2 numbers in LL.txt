//2. Add 2 numbers in LL

ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        
        //reverse both the LL
        ListNode* currHead1 = l1;
        ListNode* currHead2 = l2;

        //operation


        
        ListNode* ans = new ListNode(0);
        //store the head for head purpose
        ListNode* ansHead = ans;

        ListNode* pre = new ListNode(0);

        //take a pre for the last extra carry
        pre -> next = ans;

        int carry = 0;

        while(currHead1 != nullptr && currHead2 != nullptr)
        {            
            //sum formula
            int sum = currHead1 -> val + currHead2 -> val + carry;

            //carry and sum logic
            carry = sum/10;
            sum = sum%10;

            //setting ans value
            ans -> val = sum;

            //incrementing the pre
            pre = pre -> next;

            //creating the node for the next answer
            ListNode* nextAns = new ListNode(0);

            //attaching the curr ans to the next
            ans -> next = nextAns;

            //moving the curr answer to the next
            ans = ans -> next;

            //moving both
            currHead1 = currHead1 -> next;
            currHead2 = currHead2 -> next;
        }

        //if L1 is not finished
        while(currHead1 != NULL)
        {
            int sum = currHead1 -> val  + carry;
            carry = sum/10;
            sum = sum%10;
            ans -> val = sum;
            
            pre = pre -> next;

            ListNode* nextAns = new ListNode(0);
            ans -> next = nextAns;
            ans = ans -> next;

            currHead1 = currHead1 -> next;
        }

        //if L2 is not finished
        while(currHead2 != NULL)
        {            
            int sum = currHead2 -> val  + carry;
            carry = sum/10;
            sum = sum%10;
            ans -> val = sum;
            //pre -> next = ans;
            pre = pre -> next;

            ListNode* nextAns = new ListNode(0);
            ans -> next = nextAns;
            ans = ans -> next;

            currHead2 = currHead2 -> next;
        }

        //removing the link of the last pre which pointed to the last nextAns generated with val 0
        pre -> next = NULL;

        //if still carry
        if(carry != 0)
        {
            ListNode* extra = new ListNode(carry);
            pre -> next = extra;
        }

        return ansHead;

    }
};
//4. Median of 2 sorted arrays

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {

    //We will select number of elements that we can take to make a valid partition(divide the mereged array into 2)
    //we can either choose 0 elements from smaller array or all elements from small array    
    
        int n1 = nums1.size(), n2 = nums2.size();
        if(n1 > n2)
            return findMedianSortedArrays(nums2, nums1);

        int left = 0, right = n1;

        while(left<=right)
        {
            int cut1 = (left+right)/2;
            int cut2 = ((n1 + n2 + 1)/2) - cut1 ;

            int l1 = cut1 == 0 ? INT_MIN : nums1[cut1 - 1];
            int l2 = cut2 == 0 ? INT_MIN : nums2[cut2 - 1];
            
            //if partition is made at 0th position, make r = INT_MAX
            int r1 = cut1 == n1 ? INT_MAX : nums1[cut1];
            int r2 = cut2 == n2? INT_MAX : nums2[cut2];


            if(l1<=r2 && l2<= r1)
            {
                if((n1+n2)%2 == 0)
                    return  ((double)(max(l1, l2) + min(r1, r2))) / 2.0;
                else 
                    return  max(l1, l2);
            }

            else if (l1 > r2) 
                right = cut1 - 1;
            else
                left = cut1 + 1;

        }

        return 0.0;
                
    }
};